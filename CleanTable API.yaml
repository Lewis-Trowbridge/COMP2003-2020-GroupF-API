openapi: 3.0.0
info:
  title: CleanTable Customer API
  description: An API intended for use by the mobile application.
  version: "1.0"

servers:
  - url: http://web.socem.plymouth.ac.uk/COMP2003/COMP2003_F/api/api
    description: University API hosting

tags:
- name: "Venues"
  description: "Venues of the system"
- name: "Bookings"
  description: "Bookings of the system"
- name: "Customers" 
  description: "Customer accounts in the system"
  
paths:

  /venues/view:
    get:
      tags:
      - Venues
      summary: Gets venue information
      description: Returns all information on a given venue
      parameters:
      - in: query
        name: venueId
        required: true
        schema:
          type: integer
        description: The ID of the desired venue
      responses:
        "200":
          description: The full information of the venue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppVenueView"
        "404":
          description: Returned when no venue is found with the given ID
      

  /venues/top:
    get:
      tags:
      - Venues
      summary: Gets top venues
      description: Returns a list of the 30 top venues, intended to be displayed on a home page
      responses:
        "200":
          description: The top 30 venues.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppVenueView"
                  
    

  /venues/search/:
    get:
      tags:
      - Venues
      summary: Returns a compressed list of venues
      description: Gets a compressed list of venues designed to be displayed on a search page - only necessary information for this purpose is given.
      parameters:
        - in: query
          name: searchString
          required: true
          schema:
            type: string
          description: A venue name, city name, or postcode
      responses:
        "200":
          description: A JSON array of venue information
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    city:
                      type: string
                    postcode:
                      type: string
                      
                      
  /venues/bookTable/:
    post:
      tags:
      - Venues
      summary: Creates a new booking
      description: Creates a new booking based on the information given - it is important to note that it is the venue **table** ID that is passed.
      requestBody:
        description: The information required to create a new booking. **NOTE - AS AUTHENTICATION HAS NOT BEEN IMPLEMENTED AT THE TIME OF WRITING, THE CUSTOMER ID IS PASSED AS A PARAMETER - THIS** ***WILL*** **CHANGE**
        required: True
        content:
          application/json:
            schema:
              type: object
              properties:
                venueTableId:
                  type: integer
                customerId:
                  type: integer
                bookingDateTime:
                  type: string
                  format: date-time
                bookingSize:
                  type: integer
      responses:
        "201":
          description: The booking has been successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
        "400":
          description: The booking could not be created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
        "500":
          description: An unspecified server error has occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
        
  /venues/tablesAvailable:
    get:
      tags:
      - Venues
      summary: Gets the available tables at a time given
      description: Returns a list of all the available tables at a venue at a certain time given.
      parameters:
        - in: query
          name: venueId
          required: true
          schema:
            type: integer
          description: the venue you're searching for
        
        - in: query
          name: partySize
          required: true
          schema:
            type: integer
          description: the size of the party you want to book a table for
         
        - in: query 
          name: bookingTime
          required: true
          schema:
            type: string
            format: date-time
          description: the time and date you want to check for tables
          
      responses:
        "200":
          description: A JSON array of available tables at a given time - empty if incorrect information is given.
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tableId:
                      type: integer
                    venueTableNumber:
                      type: integer
                    numberOfSeats:
                      type: integer
              
  /bookings/view:
    get:
      tags:
      - Bookings
      summary: Returns comprehensive information on a booking
      description: Gets all of the information on a booking designed to be displayed on the view bookings page.
      parameters:
        - in: query
          name: bookingId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Returned when a valid and accessible booking ID is given
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookingId:
                    type: integer
                  bookingTime:
                    type: string
                    format: date-time
                  bookingSize:
                    type: integer
                  bookingAttended:
                    type: boolean
                  customerId:
                    type: integer
                  venueId:
                    type: integer
                  venueName:
                    type: string
                  venuePostcode:
                    type: string
                  addLineOne:
                    type: string
                  addLineTwo:
                    type: string
                  city:
                    type: string
                  county:
                    type: string
                  venueTableId:
                    type: integer
                  venueTableNum:
                    type: integer
                  venueTableCapacity:
                    type: integer
        "204":
          description: Returned when an invalid or inaccessible booking ID is given
  
  /bookings/history:
    get:
      tags:
      - Bookings
      summary: Gets a customer's booking history
      description: Gets a minified version all of the bookings that a customer has made in the past in descending order (most recent first)
      parameters:
        - in: query
          name: customerId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A list of the bookings the customer has made in the past. Can be empty if the customer has no bookings in their history.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MinifiedBookingResult"
        "404":
          description: The customer account could not be found.
          
  /bookings/delete:
    delete:
      tags:
      - Bookings
      summary: Deletes a booking
      description: Delets a booking based on the ID given.
      parameters:
      - in: query
        name: bookingId
        required: true
        schema:
          type: integer
    
      responses:
        "200":
          description: The booking has been successfully deleted. Message is "This booking has been deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
        "404":
          description: The customer account could not be found. Message is "Deletion failed - booking does not exist."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
        "500":
          description: Another error has occurred. Message is "An unspecifed server error has occured."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
          
          
  /customers/create:
    post:
      tags:
      - Customers
      summary: Creates a new customer account
      description: Creates a new customer account based on the information given. Usernames will be unique - if they are not, a specific HTTP status code will be used. Passwords are hashed using BCrypt, as recommended by OWASP.
      requestBody:
        description: The information of the new account.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerName:
                  type: string
                customerContactNumber:
                  type: string
                customerUsername:
                  type: string
                customerPassword:
                  type: string
      responses:
        "200":
          description: A user account is created using the information given. Message is "Customer account created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
        "208":
          description: A user with this username already exists. Message is "An account with that username already exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
        "500":
          description: Another error has occured. Message is "An unspecified server error has occured."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationResult"
                
  /customers/delete:
    delete:
      tags:
      - Customers
      summary: Deletes a customer account
      description: Deletes a customer account based on the ID given.
      parameters:
      - in: query
        name: customerId
        required: true
        schema:
          type: integer
        description: The ID of the customer account to be deleted.
      
        
      responses:
        "200":
          description: The customer account has been successfully deleted. Message is "This account has been deleted."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
        "404":
          description: The customer account could not be found. Message is "Deletion failed - account does not exist."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
        "500":
          description: Another error has occurred. Message is "An unspecifed server error has occured."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletionResult"
        
          
components:
  schemas:
    CreationResult:
      type: object
      properties:
        success:
          type: boolean
        id:
          type: integer
        message:
          type: string
    
    DeletionResult:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    
    AppVenueView:
      type: object
      properties:
        venueId:
          type: integer
        venuePostcode:
          type: string
        addLineOne:
          type: string
        addLineTwo:
          type: string
        city:
          type: string
        county:
          type: string
        totalCapacity:
          type: integer
          
    MinifiedBookingResult:
      type: object
      properties:
          bookingId:
            type: integer
          bookingDateTime:
            type: string
            format: date-time
          bookingSize:
            type: integer
          venueName:
            type: string
          venuePostcode:
            type: string
          
          